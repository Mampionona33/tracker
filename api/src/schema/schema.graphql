scalar GraphQLDate

enum taskStateEnum {
  isOff
  isPause
  isPlay
  isDone
}

enum processingStateEnum {
  Normal
  Sby
  Paf
}

input LoginInput {
  email: String
  password: String
}

## User -------------------
type User {
  aud: String
  azp: String
  email: String
  email_verified: Boolean
  exp: Int
  family_name: String
  given_name: String
  iat: Int
  iss: String
  jti: String
  name: String
  nbf: Int
  picture: String
  sub: String!
  role: String
}

type SessionType {
  sessionStart: GraphQLDate
  sessionStop: GraphQLDate
}

input SessionInput {
  sessionStart: GraphQLDate
  sessionStop: GraphQLDate
}

input UserIdInput {
  sub: String
}

input UserInput {
  aud: String
  azp: String
  email: String
  email_verified: Boolean
  exp: Int
  family_name: String
  given_name: String
  iat: Int
  iss: String
  jti: String
  name: String
  nbf: Int
  picture: String
  sub: String!
  role: String
}
## User -------------------

## TaskType ---------------
type TaskType {
  id: Int!
  name: String!
  goal: Float
}

## Task -------------------
type Tasks {
  id: Int!
  user: User
  boothNumber: String
  type: String
  url: String
  cat: String
  ivpn: String
  statCom: String
  processingState: processingStateEnum!
  nbBefore: Int
  nbAfter: Int
  comment: String
  taskState: taskStateEnum!
  session: [SessionType]
}
input TaskInput {
  id: Int
  user: UserInput
  boothNumber: String
  type: String
  url: String
  cat: String
  ivpn: String
  statCom: String
  #...Give the default value Normal for processingState if not given
  processingState: processingStateEnum = Normal
  nbBefore: Int = 0
  nbAfter: Int = 0
  comment: String
  #...Give the default value isPlay for taskState if not given
  taskState: taskStateEnum = isPlay
  session: [SessionInput]
}
input FilterTaskPlay {
  id: Int!
  sub: String
}

type UpdateResponse {
  acknowledged: Boolean
}

input GetTaskByDateInput {
  date: GraphQLDate
  sub: String
}

## Task -------------------

#### top level declarations
type Query {
  getMessage: String
  listUser: [User!]
  getUserTask(input: UserInput): [Tasks]
  getUserTaskByFilter(input: TaskInput): [Tasks]
  searchUser(input: UserIdInput): [User]
  getTaskByDate(query: GetTaskByDateInput): [Tasks]
  getAllTaskTypeList: [TaskType!]
}

type Mutation {
  setAboutMessage(message: String!): String
  creatUser(user: UserInput!): User
  createTask(task: TaskInput): Tasks
  updateTask(filter: FilterTaskPlay, update: TaskInput): UpdateResponse
}
